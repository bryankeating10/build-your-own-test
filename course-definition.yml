slug: "test"
name: "Build your own Redis"
short_name: "Redis"
release_status: "live"

description_md: |-
  In this challenge, you'll build a toy Redis clone
  that's capable of handling basic commands like PING, GET
  and SET. Along the way, we'll learn about event loops, the Redis
  Protocol and more.

short_description_md: |-
  Learn about TCP servers, the Redis protocol and more

completion_percentage: 30

languages:
  - slug: "c"
  - slug: "clojure"
  - slug: "crystal"
  - slug: "csharp"
  - slug: "elixir"
  - slug: "go"
  - slug: "haskell"
  - slug: "java"
  - slug: "javascript"
  - slug: "php"
  - slug: "python"
  - slug: "ruby"
  - slug: "rust"

marketing:
  difficulty: medium
  sample_extension_idea_title: "Persistence"
  sample_extension_idea_description: "A Redis server that can read and write .rdb files"
  testimonials:
    - author_name: "Charles Guo"
      author_description: "Software Engineer, Stripe"
      author_avatar: "https://codecrafters.io/images/external/testimonials/charles-guo.png"
      link: "https://github.com/shaldengeki"
      text: |-
        The Redis challenge was extremely fun. I ended up having to read the
        Redis Protocol specification doc pretty carefully in its entirety! The result
        felt like lightly-guided independent study, if that makes sense. (Which, again, was lots of fun)
    - author_name: "Patrick Burris"
      author_description: "Senior Software Developer, CenturyLink"
      author_avatar: "https://codecrafters.io/images/external/testimonials/patrick-burris.jpeg"
      link: "https://github.com/Jumballaya"
      text: |-
        I think the instant feedback right there in the git push is really cool.
        Didn't even know that was possible!

stages:
  - legacy_slug: "init"
    slug: "jm1"
    name: "Bind to a port"
    description_md: |-
      In this stage, your task is to start a TCP server on port 6379, the default port that redis uses.
    difficulty: very_easy
    marketing_md: |-
      In this stage, you'll start a TCP server on port 6379, which is the
      default port that Redis uses.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_bind.go#L11"

  - legacy_slug: "ping-pong"
    slug: "rg2"
    name: "Respond to PING"
    difficulty: easy
    description_md: |-
      In this stage, you'll respond to the
      [PING](https://redis.io/commands/ping) command.

      Your server should respond with `+PONG\r\n`, which is "PONG" encoded as a [RESP simple string](https://redis.io/docs/reference/protocol-spec/#resp-simple-strings).

      Since the tester client _only_ sends the PING command at the moment, it's okay to
      ignore what the client sends and hardcode a response. We'll get to parsing
      client input in later stages.

      Here's a sample table:

      | Column 1 Header| Column 2 Header | Column 3 Header |
      | -------------- | --------------- | --------------- |
      | Row 1, Col 1   | Row 1, Col 2    | Row 1, Col 3    |
      | Row 2, Col 1   | Row 2, Col 2    | Row 2, Col 3    |
      | Row 3, Col 1   | Row 3, Col 2    | Row 3, Col 3    |

    marketing_md: |-
      In this stage, you'll respond to the
      [PING](https://redis.io/commands/ping) command. You'll use [the Redis
      protocol](https://redis.io/topics/protocol) to encode the reply.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L9"

  - legacy_slug: "ping-pong-multiple"
    slug: "wy1"
    name: "Respond to multiple PINGs"
    difficulty: easy
    description_md: |-
      In this stage, you'll respond to multiple
      [PING](https://redis.io/commands/ping) commands sent by the same connection.

      To test your implementation using the [official Redis CLI](https://redis.io/docs/ui/cli/), you can start your server using 
      `./spawn_redis_server.sh` and then run `echo -e "ping\nping" | redis-cli` from your terminal. This will send two PING commands
      using the same connection. 

      {{#lang_is_javascript}}
      In most languages, you'd need to run a loop that reads input from a connection and sends a
      response back. In JavaScript however, if you're listening to the
      [`data`](https://nodejs.org/api/net.html#net_event_data) event, this should be automatically handled for you. **It
      is very likely that the code you had for the previous stage will pass this stage without any changes!**
      {{/lang_is_javascript}}

      {{^lang_is_javascript}}
      You'll need to run a loop that reads input from a connection and sends a
      response back.
      {{/lang_is_javascript}}
    marketing_md: |-
      In this stage, you'll respond to multiple
      [PING](https://redis.io/commands/ping) commands sent by the same client.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L35"

  - legacy_slug: "concurrent-clients"
    slug: "zu2"
    name: "Handle concurrent clients"
    difficulty: medium
    description_md: |-
      In this stage, your server will need to handle multiple concurrent
      clients. Just like the previous stages, all clients will only send `PING`
      commands for now.

      {{#lang_is_javascript}}
      In most languages, you'd need to either use threads or implement an
      [Event Loop](https://en.wikipedia.org/wiki/Event_loop) to do this. In JavaScript however, since [the concurrency
      model itself is based on an event loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop), most
      standard library functions are designed to support this kind of concurrent behaviour out of the box. **It is very
      likely that the code you had for the previous stage will pass this stage without any changes!**
      {{/lang_is_javascript}}

      {{^lang_is_javascript}}
      To achieve this, you'll need to either use threads, or, if you're feeling
      adventurous, an [Event Loop](https://en.wikipedia.org/wiki/Event_loop) (like
      the official Redis implementation does).
      {{/lang_is_javascript}}
    marketing_md: |-
      In this stage, you'll add support for multiple concurrent clients to your
      Redis server. To achieve this you'll use an [Event
      Loop](https://en.wikipedia.org/wiki/Event_loop),
      like the official Redis implementation does.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_ping_pong.go#L56"

  - legacy_slug: "echo"
    slug: "qq0"
    name: "Implement the ECHO command"
    difficulty: medium
    description_md: |-
      In this stage, you'll respond to the
      [ECHO](https://redis.io/commands/echo) command.

      The client will send you the command as a RESP array, which looks
      something like this:

      ```
      *2\r\n$4\r\nECHO\r\n$3\r\nhey\r\n
      ```

      Seems confusing? Read up about [sending commands to a Redis
      server](https://redis.io/docs/reference/protocol-spec/#send-commands-to-a-redis-server).
    marketing_md: |-
      In this stage, you'll respond to the
      [ECHO](https://redis.io/commands/echo) command. You'll parse user input
      according to the [the Redis protocol
      specification](https://redis.io/topics/protocol).
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_echo.go#L11"

  # TODO: Change this to use hyphens
  - legacy_slug: "set_get"
    slug: "la7"
    name: "Implement the SET & GET commands"
    difficulty: medium
    description_md: |-
      In this stage, you'll need to implement the [SET](https://redis.io/commands/set) &
      [GET](https://redis.io/commands/get) commands. For now, you can ignore all extra
      options for `SET` and just implement the simple form: `SET key value`. You'll add support
      for expiry in the next stage.
    marketing_md: |-
      In this stage, you'll need to implement the
      [SET](https://redis.io/commands/set) &
      [GET](https://redis.io/commands/get) commands.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/a58b9d58b33870fe26a164c0e323f809275a7250/internal/test_get_set.go#L11"

  - legacy_slug: "expiry"
    slug: "yz1"
    name: "Expiry"
    difficulty: medium
    description_md: |-
      In this stage, you'll need to support setting a key with an expiry. The
      expiry is provided using the "PX" argument to the
      [SET](https://redis.io/commands/set) command.

      The tester will first send a `SET` command with an expiry, like this: `SET <key> <value> PX <expiry>`.
      Then, it will send a `GET` command to retrieve the value, like this: `GET <key>`. If the key has expired, the 
      tester will expect a Null value as the response. Read about "Null Bulk Strings" 
      [here](https://redis.io/docs/reference/protocol-spec/#resp-bulk-strings) to know how to send a Null value.

      {{#lang_is_haskell}}
      The [time](https://hackage.haskell.org/package/time) package is available
      to use as a dependency.
      {{/lang_is_haskell}}
    marketing_md: |-
      In this stage, you'll add support for setting a key with an expiry. The
      expiry is provided using the "PX" argument to the
      [SET](https://redis.io/commands/set) command.
    tester_source_code_url: "https://github.com/codecrafters-io/redis-tester/blob/master/internal/test_expiry.go"
